\c reviews

-- DROP TABLE IF EXISTS meta CASCADE;
-- DROP TABLE IF EXISTS characteristics CASCADE;

-- -- https://stackoverflow.com/questions/7943233/fast-way-to-discover-the-row-count-of-a-table-in-postgresql
-- CREATE TABLE meta (
--   product_id INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY, -- based on reviews table
--   recommended INT DEFAULT 0,
--   not_recommended INT DEFAULT 0,
--   count_1 INT DEFAULT 0,
--   count_2 INT DEFAULT 0,
--   count_3 INT DEFAULT 0,
--   count_4 INT DEFAULT 0,
--   count_5 INT DEFAULT 0
-- );

-- CREATE TABLE characteristics (
--   id INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
--   name VARCHAR(15) UNIQUE
-- );

-- -- CREATE TABLE characteristics_reviews (
-- --   id INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
-- --   characteristic_id INT references characteristics(id), -- this is updated column to match new char table
-- --   -- need to redo based on new characteristics table
-- --   -- where char_reviews.char_id == temp_char.id use temp_char.name == char.name, insert char.id
-- --   review_id INT references reviews(review_id),
-- --   char_value SMALLINT CHECK (char_value > 0) CHECK (char_value < 6)
-- -- );

-- INSERT INTO meta (product_id)
--   SELECT product_id
--   FROM reviews
--   ON CONFLICT (product_id) DO NOTHING;

-- INSERT INTO characteristics (id, name)
--   SELECT id, characteristic_name
--   FROM product_characteristics_join
--   ON CONFLICT (name) DO NOTHING;

-- ALTER TABLE product_characteristics_join DROP COLUMN IF EXISTS characteristic_id;
ALTER TABLE product_characteristics_join DROP COLUMN IF EXISTS total_sum;
-- ALTER TABLE product_characteristics_join ADD COLUMN characteristic_id INT references characteristics(id);
ALTER TABLE product_characteristics_join ADD COLUMN total_sum INT DEFAULT 0;

-- UPDATE product_characteristics_join
--   SET characteristic_id = c.id
--   FROM characteristics c
--   WHERE c.name = characteristic_name;

-- -- load final characteristics_review table
-- ALTER TABLE characteristics_reviews DROP COLUMN IF EXISTS characteristic_id;
-- ALTER TABLE characteristics_reviews ADD COLUMN characteristic_id INT references characteristics(id);

-- UPDATE characteristics_reviews
--   SET characteristic_id = j.characteristic_id
--   FROM product_characteristics_join j
--   WHERE old_characteristic_id = j.id;







-- ALTER TABLES
-- ALTER TABLE reviews DROP COLUMN IF EXISTS date;
-- ALTER TABLE reviews ADD COLUMN date TIMESTAMP DEFAULT CURRENT_TIMESTAMP();
-- UPDATE reviews
--   SET updated_date = date_unix

-- fill characteristics reviews totals
-- UPDATE product_characteristics_join j
--   SET total_sum = total_sum + cr.characteristic_value
--   FROM characteristics_reviews cr JOIN reviews r
--     ON cr.review_id = r.review_id
--   WHERE j.product_id = r.product_id;

UPDATE product_characteristics_join j
  SET total_sum = sub_q.sum_val
  FROM
    (
      SELECT SUM(cr.characteristic_value) AS sum_val, cr.characteristic_id, r.product_id
      FROM characteristics_reviews cr JOIN reviews r
      ON cr.review_id = r.review_id
      GROUP BY r.product_id, cr.characteristic_id
    ) AS sub_q
  WHERE j.product_id = sub_q.product_id and j.characteristic_id = sub_q.characteristic_id;

-- fill meta
-- UPDATE meta
--   SET recommend

-- UPDATE meta
--   SET not_recommended

-- UPDATE meta
--   SET count_1

-- UPDATE meta
--   SET count_2

-- UPDATE meta
--   SET count_3

-- UPDATE meta
--   SET count_4

-- UPDATE meta
--   SET count_5

-- fill product_characteristics_join total_sum
-- UPDATE product_characteristics_join
--   SET total_sum
  -- for each product_id characteristic
  -- To be the sum of characteristics reviews char value with t

-- Link up foreign keys

-- add indices
-- -- index product id of reviews
-- -- index review id of photos
-- -- index product id in product_characteristics_join