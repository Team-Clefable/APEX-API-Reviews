\c reviews

DROP TABLE IF EXISTS meta CASCADE;
DROP TABLE IF EXISTS characteristics CASCADE;
DROP TABLE IF EXISTS char_prod_join CASCADE;
DROP TABLE IF EXISTS characteristics_reviews CASCADE;

-- https://stackoverflow.com/questions/7943233/fast-way-to-discover-the-row-count-of-a-table-in-postgresql
CREATE TABLE meta (
  product_id INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY, -- based on reviews table
  recommended INT DEFAULT 0,
  not_recommended INT DEFAULT 0,
  count_1 INT DEFAULT 0,
  count_2 INT DEFAULT 0,
  count_3 INT DEFAULT 0,
  count_4 INT DEFAULT 0,
  count_5 INT DEFAULT 0
);

CREATE TABLE characteristics (
  id INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  char_name VARCHAR(15) UNIQUE
);

CREATE TABLE characteristics_reviews (
  id INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  characteristic_id INT references characteristics(id), -- this is updated column to match new char table
  -- need to redo based on new characteristics table
  -- where char_reviews.char_id == temp_char.id use temp_char.name == char.name, insert char.id
  review_id INT references reviews(review_id),
  char_value SMALLINT CHECK (char_value > 0) CHECK (char_value < 6)
);

INSERT INTO meta (product_id)
  SELECT product_id
  FROM reviews
  ON CONFLICT (product_id) DO NOTHING;

INSERT INTO characteristics (id, char_name)
  SELECT id, characteristic_name
  FROM product_characteristics_join
  ON CONFLICT (char_name) DO NOTHING;

ALTER TABLE product_characteristics_join DROP COLUMN IF EXISTS updated_id;
ALTER TABLE product_characteristics_join DROP COLUMN IF EXISTS total_score;
ALTER TABLE product_characteristics_join ADD COLUMN updated_id INT references characteristics(id);
ALTER TABLE product_characteristics_join ADD COLUMN total_score INT DEFAULT 0;

UPDATE product_characteristics_join
  SET updated_id = c.id
  FROM characteristics c
  WHERE c.char_name = characteristic_name;




-- load final characteristics_review table
-- INSERT INTO characteristics_reviews (id, review_id, char_value)
--   SELECT

-- ALTER TABLES

-- UNIX time to actual time
-- ALTER TABLE reviews ADD COLUMN date DATETIME
-- -- select the unix time and do the conversion then insert into datetime row
-- -- alter and drop unix column

-- Link up foreign keys